# Author: Wjj
# Email: wjcxkfifa2@gmail.com
# Last Update: 08/15/2019
#
# 接收suricata的eve.json
#

filter {
    if [@metadata][event_type] == "suricata" {

    ##添加一些指示信息，便于后续修改
        mutate {
            add_field => {
                "[@metadata][geoip_db_city]" => "/data/geoip/GeoIP2-City.mmdb"
                "[@metadata][geoip_db_asn]" => "/data/geoip/GeoIP2-ISP.mmdb"
                "[@metadata][geoip_db_contype]" => "/data/geoip/GeoIP2-Connection-Type.mmdb"
            }
        }
##从filebeat suricata模块中的ingest pipeline提取内容*******************************
    #使用内嵌对象格式存储，便于内容归类；同时保留重命名前的字段，type设置为alias
        mutate {
            rename => {"src_ip" => "[source][ip]"}
            rename => {"src_port" => "[source][port]"}
            rename => {"dest_ip" => "[destination][ip]"}
            rename => {"dest_port" => "[destination][port]"}
            rename => {"[http][http_method]" => "[http][request][method]"}
            rename => {"[http][status]" => "[http][response][status_code]"}
        }

        if [http][hostname] {
            mutate {
                add_field => {"[destination][domain]" => "%{[http][hostname]}"}
            }
            # 对domain数组操作，感觉很多余！！！
            if [destination][domain][0] {
                if [destination][domain][1] {
                    ruby {
                        code => '
                        event.set("[destination][domain]", event.get("[destination][domain]").uniq)
                        '
                    }
                }
            }
            if [destination][domain][0] {
                if (![destination][domain][1]) {
                    mutate {
                    update => {"[destination][domain]" => "%{[destination][domain][0]}"}
                    }
                }
            }
            mutate {
                copy => {"[destination][domain]" => "[url][domain]"}
                remove_field => ["[http][hostname]"]
            }
        }
        mutate {
            lowercase => [ "[http][request][method]", "[event_type]" ]
        }
        
    #分解http.url
        if [http][url] {
            grok {
                match => { "[http][url]" => "%{PATH:[url][path]}(?:\\?%{QUERY:[url][query]})?(?:#%{ANY:[url][fragment]})?" }
                pattern_definitions => { 
                    "PATH" => "[^?#]*"
                    "QUERY" => "[^#]*"
                    "ANY" => ".*"
                    }
            }
        }

        mutate {
            rename => { "[http][url]" => "[url][original]" }
            rename => { "[http][http_refer]" => "[http][request][referrer]" }
            rename => { "[http][length]" => "[http][response][body][bytes]" }
            rename => { "[fileinfo][filename]" => "[file][path]" }
            rename => { "[fileinfo][size]" => "[file][size]" }
        }

        date {
            match => ["[timestamp]", "ISO8601"]
            target => "[@timestamp]"
        }

        mutate {
            rename => { "[alert][action]" => "[event][outcome]" }
            rename => { "[alert][severity]" => "[event][severity]" }
            rename => { "[flow][pkts_toclient]" => "[destination][packets]" }
            rename => { "[flow][pkts_toserver]" => "[source][packets]" }
            rename => { "[flow][bytes_toclient]" => "[destination][bytes]" }
            rename => { "[flow][bytes_toserver]" => "[source][bytes]" }
            rename => { "[proto]" => "[network][transport]" }
            lowercase => ["[network][transport]"]
            rename => { "app_proto" => "[network][protocol]" }
            lowercase => ["[network][protocol]"]
            copy => { "@timestamp" => "[event][end]" }
        }

        date {
            match => ["[flow][start]", "ISO8601"]
            target => "[event][start]"
        }

    #计算流通量
        #双向包量
        if [source][packets] or [destination][packets] {
            ruby {
                code => '
                    sp = event.get("[source][packets]").to_i
                    dp = event.get("[destination][packets]").to_i
                    event.set("[network][packets]", sp+dp)
                '
            }
        }
        #双向字节数
        if [source][bytes] or [destination][bytes] {
            ruby {
                code => '
                    sb = event.get("[source][bytes]").to_i
                    db = event.get("[destination][bytes]").to_i
                    event.set("[network][bytes]", sb+db)
                '
            }
        }

    #计算会话持续时间，微秒级别
        if [event][start] and [event][end] {
            ruby {
            code => '
            starttime = event.get("[event][start]").time.to_f
            endtime = event.get("[event][end]").time.to_f
            if endtime >= starttime 
                event.set("[event][duration]", endtime-starttime)
            else
                event.set("[event][duration]", 0)
            end
            '
            }
        }
        useragent {
            source => "[http][http_user_agent]"
            target => "user_agent"
        }

        mutate {
            convert => {
                "[alert][category]" => "string"
            }
            rename => { "[alert][category]" => "message" }
            copy => {"message" => "[@metadata][msg_lowcase]"}
        }

##全部小写，便于后续能转换为中文
        mutate {
            lowercase => [ "[@metadata][msg_lowcase]" ]
        }

        mutate {
        remove_field => ["app_proto",
                    "flow.end",
                    "flow.start",
                    "http.http_method",
                    "proto",
                    "timestamp",
                    "http.http_user_agent"]
        }
        if [event_type] == "stats" {
            mutate{
            add_field => {"[event][kind]" => "metric"}
            }
        }
        else if [event_type] == "alert" {
            mutate{
            add_field => {"[event][kind]" => "alert"}
            add_field => {"[event][category]" => "network_traffic"}
            }
        }
        else {
            mutate{
            add_field => {"[event][kind]" => "event"}
            add_field => {"[event][category]" => "network_traffic"}
            }
        }

        if [event_type] == "alert" {
            translate {
                field => "[@metadata][msg_lowcase]"
                destination => "[message_cn]"
                fallback => "%{message}"
                dictionary => {
                    "denial of service" => "DoS攻击"
                    "web application attack" => "Web应用服务攻击"
                    "successful administrator privilege gain" => "成功获取Administrator权限"
                    "successful user privilege gain" => "成功获取user权限"
                    "large scale information leak" => "大范围信息泄漏"
                    "access to a potentially vulnerable web application" => "访问潜在易受攻击的Web应用"
                    "not suspicious traffic" => "非可疑流量"
                    "unsuccessful user privilege gain" => "获取user权限失败"
                    "detection of a denial of service attack" => "检测到DoS攻击"
                    "a tcp connection was detected" => "检测到TCP连接"
                    "inappropriate content was detected" => "检测到不该出现的内容"
                    "successful credential theft detected" => "检测到成功的凭证窃取"
                    "detection of a non-standard protocol or event" => "检测到非标协议或事件"
                    "crypto currency mining activity detected" => "检测到加密货币挖掘活动"
                    "device retrieving external ip address detected" => "检测到检索外部IP地址的设备"
                    "possibly unwanted program detected" => "检测到可能不需要的程序活动"
                    "a suspicious filename was detected" => "检测到可疑文件名"
                    "a suspicious string was detected" => "检测到可疑字符串"
                    "executable code was detected" => "检测到可执行代码"
                    "exploit kit activity detected" => "检测到漏洞利用工具集活动"
                    "targeted malicious activity was detected" => "检测到目标恶意活动"
                    "an attempted login using a suspicious username was detected" => "检测到企图使用可疑用户名登录"
                    "a network trojan was detected" => "检测到网络木马"
                    "detection of a network scan" => "检测到网络扫描"
                    "a system call was detected" => "检测到系统调用"
                    "possible social engineering attempted" => "检测到疑似社工尝试"
                    "domain observed used for c2 detected" => "检测到用于C2的域名"
                    "a client was using an unusual port" => "客户侧使用异常端口"
                    "misc attack" => "其他攻击"
                    "misc activity" => "其他活动"
                    "attempted denial of service" => "企图DOS攻击"
                    "attempted administrator privilege gain" => "企图获取Administrator权限"
                    "attempted user privilege gain" => "企图获取user权限"
                    "attempt to login by a default username and password" => "企图使用默认用户名口令登录"
                    "attempted information leak" => "企图信息泄漏"
                    "potentially bad traffic" => "潜在不良流量"
                    "potential corporate privacy violation" => "潜在的公司隐私侵犯"
                    "generic protocol command decode" => "通用协议指令解码"
                    "sensitive data was transmitted across the network" => "网络中传输着敏感数据"
                    "unknown traffic" => "未知流量"
                    "information leak" => "信息泄漏"
                    "generic icmp event" => "一般ICMP事件"
                    "decode of an rpc query" => "一个RPC查询的解码"
                    "known malware command and control traffic" => "已知恶意软件命令和控制通信流量"
                    "known malicious file or file based exploit" => "已知恶意文件或基于文件的漏洞利用"
                    "known client side exploit attempt" => "已知客户侧攻击企图"
                }
            }
        }
    }
}
