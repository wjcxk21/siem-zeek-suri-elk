# Author: Wjj
# Email: wjcxkfifa2@gmail.com
# Last Update: 08/15/2019
#
# 丰富suricata的event
# 借鉴 synesis_lite_snort的一些处理
#

filter {
  if [@metadata][event_type] == "suricata" {

    # 判断IP版本
    if [source][ip] {
        cidr {
        address => [ "%{[source][ip]}" ]
        network => [ "0.0.0.0/0" ]
        add_field => {
          "[ip_version]" => "IPv4"
        }
      }
      if ![ip_version] {
        cidr {
        address => [ "%{[source][ip]}" ]
        network => [ "::/0" ]
          add_field => {
          "[ip_version]" => "IPv6"
          }
        }
      }
    }
    else if [destination][ip] {
        cidr {
        address => [ "%{[destination][ip]}" ]
        network => [ "0.0.0.0/0" ]
        add_field => {
          "[ip_version]" => "IPv4"
        }
      }
      if ![ip_version] {
        cidr {
          address => [ "%{[destination][ip]}" ]
          network => [ "::/0" ]
          add_field => {
            "[ip_version]" => "IPv6"
          }
        }
      }
    }
#如果有内部dns库，可以尝试解析（注意内网地址）

    #丰富geoip相关信息，注意配置database的路径
    if [source][ip] or [destination][ip] {
      ##先将traffic_locality设置为private，根据后面的解析情况来修改
      mutate {
        add_field => {"[network][traffic_locality]" => "private"}
      }
      if [destination][ip] {
        if [destination][ip] == "-" {
          mutate {
            replace => { "[destination][ip]" => "0.0.0.0" }
          }
        }
        ##添加ips字段，便于模糊搜索
        mutate {
          add_field => { "ips" => "%{[destination][ip]}" }
          add_field => { "[destination][ips]" => [ "%{[destination][ip]}" ] }
        }
        ##内网IP单独处理
        if [ip_version] == 'IPv4' {
          cidr {
            address => [ "%{[destination][ip]}" ]
            network => [ "0.0.0.0/32", "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16",  "127.0.0.0/8", "169.254.0.0/16", "224.0.0.0/4", "255.255.255.255/32" ]
            add_field => { "[destination][autonomous_system]" => "private" }
          }
        } else {
          cidr {
            address => [ "%{[destination][ip]}" ]
            network => [ "fc00::/7", "::1/128", "fe80::/10", "ff00::/8" ]
            add_field => { "[destination][autonomous_system]" => "private" }
          }
        }
        ##如果上面没有设置[destination][autonomous_system] 字段，则应该是public
        if ![destination][autonomous_system] {
          mutate {
            replace => {"[network][traffic_locality]" => "public"}
          }
          geoip {
            database => "/data/geoip/GeoIP2-City.mmdb"
            source => "[destination][ip]"
            target => "[destination][geo]"
            cache_size => "2048"
            fields => [ "city_name", "continent_code", "country_code2", "country_name", "location", "region_name", "region_code", "timezone" ]
          }
          ##城市名和国家名，便于汇总展示
          if [destination][geo][city_name] {
            mutate {
              add_field => {"city" => "%{[destination][geo][city_name]}"}
            }
          }
          if [destination][geo][country_name] {
            mutate {
              add_field => {"country" => "%{[destination][geo][country_name]}"}
            }
          }
          ##ASN
          geoip {
            database => "/data/geoip/GeoIP2-ISP.mmdb"
            source => "[destination][ip]"
            target => "[destination][as]"
            cache_size => "2048"
            fields => ["autonomous_system_number", "autonomous_system_organization", "isp"]
          }
          if [destination][as] {
            mutate {
              rename => ["[destination][as][autonomous_system_number]", "[destination][as][number]"]
              rename => ["[destination][as][autonomous_system_organization]", "[destination][as][org]"]
            }
          }
          ##connect_type，geoip模块还不支持
#          geoip {
#            database => "/data/geoip/GeoIP2-Connection-Type.mmdb"
#            source => "[destination][ip]"
#            target => "[destination][as]"
#            cache_size => "2048"
#            fields => ["connection_type"]
#          }

          ## 通过数据库或字典标注 IP reputation labels

#          if [@metadata][dest_rep_label] {
#            csv {
#              source => "[@metadata][dest_rep_label]"
#              target => "[destination][rep_tags]"
#            }
#          }
          if [@metadata][dest_rep_label] {
            ruby {
              init => "
                require 'csv'
              "
              code => "
                event.set('[destination][rep_tags]', event.get('[@metadata][dest_rep_label]').parse_csv)
              "
            }
          }
        }
      }
      if [source][ip] {
        if [source][ip] == "-" {
          mutate {
            replace => { "[source][ip]" => "0.0.0.0" }
          }
        }
        ##添加ips字段，便于模糊搜索
        mutate {
          add_field => { "ips" => "%{[source][ip]}" }
          add_field => { "[source][ips]" => [ "%{[source][ip]}" ] }
        }
        ##内网IP单独处理
        if [ip_version] == 'IPv4' {
          cidr {
            address => [ "%{[source][ip]}" ]
            network => [ "0.0.0.0/32", "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16",  "127.0.0.0/8", "169.254.0.0/16", "224.0.0.0/4", "255.255.255.255/32" ]
            add_field => { "[source][autonomous_system]" => "private" }
          }
        } else {
          cidr {
            address => [ "%{[source][ip]}" ]
            network => [ "fc00::/7", "::1/128", "fe80::/10", "ff00::/8" ]
            add_field => { "[source][autonomous_system]" => "private" }
          }
        }
        ##如果上面没有设置[source][autonomous_system] 字段，则应该是public
        if ![source][autonomous_system] {
          mutate {
            replace => {"[network][traffic_locality]" => "public"}
          }
          geoip {
            database => "/data/geoip/GeoIP2-City.mmdb"
            source => "[source][ip]"
            target => "[source][geo]"
            cache_size => "2048"
            fields => [ "city_name", "continent_code", "country_code2", "country_name", "location", "region_name", "region_code", "timezone" ]
          }
          ##城市名和国家名，便于汇总展示
          if [source][geo][city_name] {
            mutate {
              add_field => {"city" => "%{[source][geo][city_name]}"}
            }
          }
          if [source][geo][country_name] {
            mutate {
              add_field => {"country" => "%{[source][geo][country_name]}"}
            }
          }
          ##ASN
          geoip {
            database => "/data/geoip/GeoIP2-ISP.mmdb"
            source => "[source][ip]"
            target => "[source][as]"
            cache_size => "2048"
            fields => ["autonomous_system_number", "autonomous_system_organization", "isp"]
          }
          if [source][as] {
            mutate {
              rename => ["[source][as][autonomous_system_number]", "[source][as][number]"]
              rename => ["[source][as][autonomous_system_organization]", "[source][as][org]"]
            }
          }
          ##connect_type，geoip模块还不支持
#          geoip {
#            database => "/data/geoip/GeoIP2-Connection-Type.mmdb"
#            source => "[source][ip]"
#            target => "[source][as]"
#            cache_size => "2048"
#            fields => ["connection_type"]
#          }
          ## 通过数据库或字典标注 IP reputation labels

#          if [@metadata][src_rep_label] {
#            csv {
#              source => "[@metadata][src_rep_label]"
#              target => "[source][rep_tags]"
#            }
#          }
          if [@metadata][src_rep_label] {
            ruby {
              init => "
                require 'csv'
              "
              code => "
                event.set('[source][rep_tags]', event.get('[@metadata][src_rep_label]').parse_csv)
              "
            }
          }
        }
      }
    }

# 丰富端口名称
    if [network][transport] {
      if [network][transport] == "TCP" {
        if [source][port] {
          translate {
            dictionary_path => "/data/dictionaries/iana_service_names_tcp.yml"
            field => "[source][port]"
            destination => "[source][port_name]"
            fallback => "__UNKNOWN"
          }
        }
        if [destination][port] {
          translate {
            dictionary_path => "/data/dictionaries/iana_service_names_tcp.yml"
            field => "[destination][port]"
            destination => "[destination][port_name]"
            fallback => "__UNKNOWN"
          }
        }
      } else if [network][transport] == "UDP" {
        if [source][port] {
          translate {
            dictionary_path => "/data/dictionaries/iana_service_names_udp.yml"
            field => "[source][port]"
            destination => "[source][port_name]"
            fallback => "__UNKNOWN"
          }
        }
        if [destination][port] {
          translate {
            dictionary_path => "/data/dictionaries/iana_service_names_udp.yml"
            field => "[destination][port]"
            destination => "[destination][port_name]"
            fallback => "__UNKNOWN"
          }
        }      
      } else if [network][transport] == "SCTP" {
        if [source][port] {
          translate {
            dictionary_path => "/data/dictionaries/iana_service_names_sctp.yml"
            field => "[source][port]"
            destination => "[source][port_name]"
            fallback => "__UNKNOWN"
          }
        }
        if [destination][port] {
          translate {
            dictionary_path => "/data/dictionaries/iana_service_names_sctp.yml"
            field => "[destination][port]"
            destination => "[destination][port_name]"
            fallback => "__UNKNOWN"
          }
        }      
      } else if [network][transport] == "DCCP" {
        if [source][port] {
          translate {
            dictionary_path => "/data/dictionaries/iana_service_names_dccp.yml"
            field => "[source][port]"
            destination => "[source][port_name]"
            fallback => "__UNKNOWN"
          }
        }
        if [destination][port] {
          translate {
            dictionary_path => "/data/dictionaries/iana_service_names_dccp.yml"
            field => "[destination][port]"
            destination => "[destination][port_name]"
            fallback => "__UNKNOWN"
          }
        }      
      } else {
        mutate {
            add_field => {"[source][port_name]" => "__UNKNOWN"}
            add_field => {"[destination][port_name]" => "__UNKNOWN"}
          }
      }
      # 确定服务端，客户端
      if [source][port] and [destination][port] {
        # 通过识别出的应用层服务，rep_tag确定
        if [network][protocol] == [destination][port_name] or [network][protocol] in [destination][rep_tags] {
          mutate {
            add_field => {"[@metadata][isServer]" => "dest"}
          }
        } else if [network][protocol] == [source][port_name] or [network][protocol] in [source][rep_tags] {
          mutate {
            add_field => {"[@metadata][isServer]" => "src"}
          }
        } else {
          if [source][port_name] == "__UNKNOWN" {
            if [destination][port_name] == "__UNKNOWN" {
              if [destination][port] <= [source][port] {
                mutate {
                  add_field => {"[@metadata][isServer]" => "dest"}
                }
              } else {
                mutate {
                  add_field => {"[@metadata][isServer]" => "src"}
                }
              }
            } else {
              mutate {
                add_field => {"[@metadata][isServer]" => "dest"}
              }
            }
          } else {
            if [destination][port_name] == "__UNKNOWN" {
              mutate {
                add_field => {"[@metadata][isServer]" => "src"}
              }
            } else {
              if [destination][port] <= [source][port] {
                mutate {
                  add_field => {"[@metadata][isServer]" => "dest"}
                }
              } else {
                mutate {
                  add_field => {"[@metadata][isServer]" => "src"}
                }
              }
            }
          }
        }
      }

  # 整理一下port_name
      if [source][port_name] {
        if [source][port_name] == "__UNKNOWN" {
          if [source][port] {
            mutate {
              replace => { "[source][port_name]" => "%{[network][transport]}/%{[source][port]}" }
            } 
          } else {
            mutate {
              replace => { "[source][port_name]" => "%{[network][transport]}/0" }
            }
          }
        } else {
          mutate {
            replace => { "[source][port_name]" => "%{[source][port_name]}/%{[source][port]}" }
          }
        }
      }
      if [destination][port_name] {
        if [destination][port_name] == "__UNKNOWN" {
          if [destination][port] {
            mutate {
              replace => { "[destination][port_name]" => "%{[network][transport]}/%{[destination][port]}" }
            } 
          } else {
            mutate {
              replace => { "[destination][port_name]" => "%{[network][transport]}/0" }
            }
          }
        } else {
          mutate {
            replace => { "[destination][port_name]" => "%{[destination][port_name]}/%{[destination][port]}" }
          }
        }
      }
      
  # 根据上面的判断，增加 client、server、service等对象字段
      if [@metadata][isServer] == "dest" {
        mutate {
          copy => {"source" => "client"}
          copy => {"destination" => "server"}
        }
      } else if [@metadata][isServer] == "src" {
        mutate {
          copy => {"source" => "server"}
          copy => {"destination" => "client"}
        }
      }
    }

# 安全级别
    if [event][severity] {
      translate {
        field => "[event][severity]"
        destination => "[event][severity_cn]"
        dictionary => {
          "1" => "警报/ALERT"
          "2" => "严重/CRITICAL"
          "3" => "警告/WARNING"
          "4" => "提示/NOTICE"
        }
        fallback => "警告/WARNING"
      }
    } else {
      mutate {
        replace => { "[event][severity_cn]" => "信息/INFO" }
      }
    }

#添加到moloch的连接表达式
    if [event][start] {
      ruby {
        code => '
        starttime = event.get("[event][start]").time.to_i - 3600*24
        endtime = event.get("[event][end]").time.to_i + 3600*24
        srcip = event.get("[source][ips]")
        dstip = event.get("[destination][ips]")
        event.set("[ToMoloch]", "expression=ip.src%20%3D%3D%20#{ srcip }%20%26%26%20ip.dst%20%3D%3D%20#{dstip}&stopTime=#{endtime}&startTime=#{starttime}")
        '
      }
    }
    else {
      ruby {
        code => '
        starttime = event.get("[@timestamp]").time.to_i - 3600*12
        endtime = event.get("[@timestamp]").time.to_i + 3600*12
        srcip = event.get("[source][ips]")
        dstip = event.get("[destination][ips]")
        event.set("[ToMoloch]", "expression=ip.src%20%3D%3D%20#{ srcip }%20%26%26%20ip.dst%20%3D%3D%20#{dstip}&stopTime=#{endtime}&startTime=#{starttime}")
        '
      }
    }
  }
}